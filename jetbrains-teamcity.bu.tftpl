# Configuration for the Flatcar VM, with support for terraform template substitution.
#
# see
#   - https://coreos.github.io/butane/config-flatcar-v1_1/
#   - https://coreos.github.io/butane/config-flatcar-v1_0/
#   - https://coreos.github.io/butane/
#
version: 1.1.0
variant: flatcar

passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFkyaM9D4TtCOSdIR8JvH5DCt0UHbfPGx7VlSJrP593N greg-ed25519
    - name: tcuser
      uid: 1000
      primary_group: tcuser
      no_create_home: true
    - name: postgres
      uid: 999
      primary_group: postgres
      no_create_home: true
  groups:
    - name: tcuser
      gid: 1000
    - name: postgres
      gid: 999

storage:
  disks:
    # Partition the ZFS sparse zvol with a GPT, with a single swap partition
    #
    # see:
    #   - https://docs.docker.com/config/containers/resource_constraints/
    - device: /dev/vda
      wipe_table: false
      partitions:
        - label: swap
          wipe_partition_entry: false
          type_guid: 0657FD6D-A4AB-43C4-84E5-0933C84B4F4F # see https://en.wikipedia.org/wiki/GUID_Partition_Table

    # Partition the sparse ZFS zvol with a GPT, with a single partition
    - device: /dev/vdb
      wipe_table: false
      partitions:
        - label: pgdata
          number: 1
          wipe_partition_entry: false
          type_guid: 3B8F8425-20E0-4F3B-907F-1A25A76F98E8 # see https://en.wikipedia.org/wiki/GUID_Partition_Table

  filesystems:
    - device: /dev/disk/by-partlabel/swap
      format: swap
      wipe_filesystem: true
      label: swap
      with_mount_unit: true

    # In theory this partition could be auto-mounted, but it is not on the same physical disk
    # as the EFI system partition.
    - device: /dev/disk/by-partlabel/pgdata
      path: /var/lib/postgresql
      format: ext4
      wipe_filesystem: false
      label: pgdata
      with_mount_unit: true

  directories:
    # TODO: This won't work as the /var/lib/teamcity filesystem won't be mounted in time
    - path: /var/lib/teamcity/data
      mode: 0750
      user:
        name: tcuser
      group:
        name: tcuser
    - path: /var/lib/teamcity/logs
      mode: 0750
      user:
        name: tcuser
      group:
        name: tcuser

  files:
    - path: /etc/hostname
      mode: 0644
      contents:
        inline: ${vm_name}

    # Docker compose for Jetbrains Teamcity
    #
    # To get athe admin token (from the 'olive' flatcar VM):
    # To get athe admin token (from the 'olive' flatcar VM):
    #     tail -f  /var/lib/teamcity/logs/teamcity-server.log
    # see:
    #  - https://hub.docker.com/r/jetbrains/teamcity-server/
    #  - https://hub.docker.com/_/postgres
    #  - https://github.com/JetBrains/teamcity-docker-samples
    #  - https://github.com/JetBrains/teamcity-docker-samples/blob/master/compose-ubuntu/docker-compose.yml
    #  - https://youtrack.jetbrains.com/issue/TW-83763/Teamcity-failed-to-start-with-new-PSQL-16-ERROR-unrecognized-configuration-parameter-lccollate
    - path: /etc/docker-compose.yaml
      mode: 0444
      contents:
        local: docker-compose.yaml

    - path: /etc/systemd/network/10-eth0.network
      contents:
        inline: local eth0.network

    # Locks down the ssh daemon.
    #
    # see:
    #  - https://www.flatcar.org/docs/latest/setup/security/customizing-sshd/
    - path: /etc/ssh/sshd_config
      overwrite: true
      mode: 0600
      contents:
        inline: |
          # Use most defaults for sshd configuration.
          Subsystem sftp internal-sftp
          UseDNS no

          PermitRootLogin no
          AllowUsers core pages
          AuthenticationMethods publickey        
  
systemd:
  units:
    - name: var-lib-teamcity.mount
      enabled: true
      contents: |
        [Unit]
        Description=Data for Jetbrains Teamcity
        
        [Mount]
        What=teamcity-data
        Where=/var/lib/teamcity
        Type=9p
        Options=trans=virtio
        
        [Install]
        WantedBy=local-fs.target

    # Use host networking, so disable the bridge and iptables/NAT
    - name: docker.service
      enabled: true
      dropins:
        - name: 10-ipv6.conf
          contents: |
            [Service]
            Environment="DOCKER_OPTS=--bridge=none --iptables=false --ip-masq=false"
        

    # 'docker compose' (v2) is not part of flatcar, so add it. This needs to be done
    # after the network comes up, so do it via a systemd unit rather than a 'file' entry.
    #
    # WARNING: this doesn't install the cli plugin correctly, as it would need to be
    # installed on '/usr' which is read-only. So docker compose must be used via
    # `docker-compose` (i.e. with the hyphen).
    #
    # TODO: put this into a `.service` file when v1.1.0 ignition files are supported
    # TODO: consider using a sysext
    #
    # see
    #  - https://github.com/flatcar/Flatcar/issues/894#issuecomment-1318414513
    #  - https://github.com/docker/compose
    - name: docker-compose-install.service
      enabled: true
      contents: |
        [Unit]
        Wants=network-online.target
        After=network.target network-online.target
        ConditionFileIsExecutable=!/opt/bin/docker-compose
        
        [Service]
        Environment=SOURCE_URL=https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-linux-x86_64
        Environment=VERIFICATION=08e549924823e97a3ea303c2309b812dfd5223b8be5ff96fe41bf75181ce0977
        Type=oneshot
        RemainAfterExit=True
        ExecStart=/usr/bin/curl --location --no-progress-meter --output /opt/bin/docker-compose~ "$${SOURCE_URL}"
        ExecStart=/bin/sh -c "echo \"$${VERIFICATION} /opt/bin/docker-compose~\" | /usr/bin/sha256sum --check --status"
        ExecStart=/usr/bin/chmod +x /opt/bin/docker-compose~
        ExecStart=/usr/bin/mv /opt/bin/docker-compose~ /opt/bin/docker-compose
        
        [Install]
        WantedBy=multi-user.target

    # Teamcity Service
    - name: teamcity.service
      enabled: true
      contents: |
        [Unit]
        After=docker.service docker-compose-install.service
        Requires=docker.service docker-compose-install.service
        
        [Service]
        # Create directory manually, as /var/lib/teamcity is mounted after ignition runs
        ExecStartPre=/bin/mkdir -p /var/lib/teamcity/data /var/lib/teamcity/logs /var/lib/postgresql/data 
        ExecStartPre=/bin/chown postgres:postgres /var/lib/postgresql /var/lib/postgresql/data 
        ExecStartPre=/bin/chown tcuser:tcuser /var/lib/teamcity/data /var/lib/teamcity/logs 
        ExecStart=/opt/bin/docker-compose -f /etc/docker-compose.yaml up
        
        [Install]
        WantedBy=multi-user.target
